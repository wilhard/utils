/**
 * @author wangjianbo
 * @created 2018-10-10
 */
package com.iamnotme.utils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ctd.util.MD5StringUtil;


/**
 * @author wangjianbo
 * 
 */
public class AutoLogger {
	static Logger logger = LoggerFactory
			.getLogger(AutoLogger.class);
	public static String jsonRequestUrl="https://web.bsoft.com.cn/portal/*.jsonRequest";
	public static String loadRoles="https://web.bsoft.com.cn/portal/logon/myRoles";
	public static String loadApps="https://web.bsoft.com.cn/portal/logon/myApps?urt=%s&deep=3&number=";
	
	public static void main(String[] args) {
		try {
			writeByDate("6102", "asd123","2019-01-03", null);
//			deleteLog("5446784","28AC0637098AE56911108910E686F7F7");
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void deleteLog(String rzid,String sessionId) throws ClientProtocolException, IOException{
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "application/json");
		headers.put("encoding", "utf-8");
		headers.put("Cookie", "JSESSIONID="+sessionId);
		String json=String.format("{\"schema\":\"portal.main.entry.KQ_GZRZ\",\"serviceId\":\"portal.WorkLogService\",\"method\":\"deleteGzrz\",\"body\":[%s]}", rzid);
		Map<String, Object> result=HttpClientUtil
				.post(jsonRequestUrl,json, headers,null);
		int kqid=(Integer) ((Map<String,Object>)result.get("body")).get("kqid");
		json=String.format("{\"schema\":\"portal.main.entry.T_KQB\",\"serviceId\":\"portal.CheckWorkService\",\"method\":\"updateGZRZ\",\"body\":[%s]}", kqid);
		result=HttpClientUtil.post(jsonRequestUrl,json, headers,null);
		System.out.println(result);
	}

	/**
	 * 
	 * @author wangjianbo
	 * @created 2018-10-25
	 * @param userId
	 * @param date
	 * @param headers
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 */
	@SuppressWarnings("unchecked")
	private static String getLogByDate(String userId,String date,int queryType,Map<String, String> headers) throws ClientProtocolException, IOException{
		//查询是否有考勤
		String json=String.format("{\"serviceId\":\"portal.CheckWorkService\",\"method\":\"findByYgghAndKqrq\",\"schema\":\"portal.main.entry.T_KQB\",\"body\":[\"%s\",\"%s\",%d]}", userId,date,queryType);
		Map<String, Object> result=HttpClientUtil
				.post(jsonRequestUrl,json, headers,null);
		List<Map<String,Object>> body=(List<Map<String, Object>>) result.get("body");
		if(body!=null && body.size()>0){
			//考勤ID
			Integer kqid=(Integer) body.get(0).get("id");
			
			//查询是否写日志
			json=String.format("{\"serviceId\":\"portal.WorkLogViewService\",\"method\":\"findBykqid\",\"schema\":\"portal.main.entry.KQ_GZRZ_View\",\"pageSize\":25,\"body\":[%s],\"pageNo\":1}", kqid);
			result=HttpClientUtil
					.post(jsonRequestUrl,json, headers,null);
			result=(Map<String, Object>) result.get("body");
			List<Map<String, Object>> items=(List<Map<String, Object>>) result.get("items");
			if(items!=null && items.size()>0){
				String content=(String) items.get(0).get("gzrz");
				return content;
			}
		}
		
		return null;
		
	}
	/**
	 * 调用登陆接口，并创建通用的请求头信息
	 * @author wangjianbo
	 * @created 2019-1-3
	 * @param userId
	 * @param pwd
	 * @return
	 * @throws IOException 
	 * @throws ClientProtocolException 
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, String> logAndBuildHeader(String userId,String pwd) throws ClientProtocolException, IOException{
		//请求参数
		Map<String, Object> params = new LinkedHashMap<String, Object>();
		params.put("pwd", MD5StringUtil.MD5Encode(pwd));
		params.put("uid", userId);
		
		//请求头
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "application/json");
		headers.put("encoding", "utf-8");
		
		//响应头，接受响应头信息
		Map<String, String> responseHeaders = new HashMap<String, String>();
		
		//加载角色
		Map<String,Object> result=HttpClientUtil
				.post(loadRoles+"?"+Math.random(),
						params, headers,responseHeaders);
		//获取sessionId
		String sessionId="";
		if(responseHeaders.containsKey("Set-Cookie")){
			String cookieStr=responseHeaders.get("Set-Cookie");
			for(String entrys:cookieStr.split(";")){
				String[] arr=entrys.split("=");
				if(arr.length==2 && arr[0].equals("JSESSIONID")){
					sessionId=arr[1];
					//放入请求头map
					headers.put("Cookie", "JSESSIONID="+sessionId+";6102=%u738B%u5EFA%u6CE2@undefined");
					break;
				}
			}
		}
		//获取角色列表
		List<Map<String,Object>> body=(List<Map<String, Object>>) result.get("body");
		//获取urt
		int urt = 0 ;
		if(body!=null && body.size()>0){
			//获取第一个角色urt
			urt=(Integer) body.get(0).get("id");
		}
		
		//加载首页
		HttpClientUtil
		.get(String.format(loadApps+Math.random(), urt),
				params, headers);
		return headers;
	}
	/**
	 * 补录指定日期日志
	 * @author wangjianbo
	 * @created 2018-10-25
	 * @param userId
	 * @param pwd
	 * @param date
	 * @param content
	 * @throws ClientProtocolException
	 * @throws IOException
	 */
	@SuppressWarnings("unchecked")
	public static void writeByDate(String userId,String pwd,String date,String defaultLogContent) throws ClientProtocolException, IOException{
		//请求头
		Map<String, String> headers = logAndBuildHeader(userId, pwd);
		
		//查询这天是否写过日志
		String content=getLogByDate(userId, date,1, headers);//日志内容
		if(content!=null){
			String msg=String.format("工号:%s，日期:%s，已写日志，不需要补录！", userId,date);
			logger.info(msg);
			return;
		}
		
		//需要补录日志
		//查询该工号前{days}天有没有写过日志
		int days=10;
		String lastDay=date;
		for(int i=1;i<=days;i++){
			lastDay=DateUtils.yesterdayOf(lastDay);
			//上一天日志内容
			content=getLogByDate(userId, lastDay,2, headers);
			if(content!=null){
				break;
			}else if(i==days){//轮询到最早的一天都没有查询到日志
				String msg=String.format("工号:%s，过去%s天都没写过日志，无法自动补录！", userId,days+1);
				logger.info(msg);
				return;
			}
		}
		
		//如果传入了日志内容，采用传入的内容
		if(defaultLogContent!=null){
			content=defaultLogContent;
		}
		
		//请求json串
		String json;
		
		//加载最近项目
		json=String.format("{\"serviceId\":\"portal.CheckWorkService\",\"method\":\"getGsxmByYggh\",\"body\":[\"%s\"]}", userId);
		Map<String,Object> result = HttpClientUtil
				.post(jsonRequestUrl,json, headers,null);
		//日志项目ID
		String projectId=(String) result.get("body");
		
		//查找项目
		json=String.format("{\"schema\":\"portal.main.entry.T_Project\",\"serviceId\":\"portal.ProjectService\",\"method\":\"findByProjectId\",\"body\":[\"%s\",\"%s\"]}", projectId,date);
		result=HttpClientUtil
				.post(jsonRequestUrl,json, headers,null);
		List<Map<String, Object>> body=(List<Map<String, Object>>) result.get("body");
		//区域编码，下面会用到
		String area = null;
		if(body!=null && body.size()>0){
			area=(String) body.get(0).get("area");
		}
		
		//保存考勤表
		json=String.format("{\"schema\":\"portal.main.entry.T_KQB\",\"serviceId\":\"portal.CheckWorkService\",\"method\":\"saveKqb\",\"body\":[{\"yggh\":\"%s\",\"gzrz\":\"\",\"flag\":5,\"housename\":\"\",\"rzqk\":\"1\",\"zfid\":\"\",\"kqrq\":\"%s\",\"ccbz\":0}]}", userId,date);
		result=HttpClientUtil
				.post(jsonRequestUrl,json, headers,null);
		//考勤ID，需要先保存考勤，再保存日志
		int kqid=(Integer) ((Map<String,Object>)result.get("body")).get("id");
		
		//保存日志
//		json=String.format("{\"schema\":\"portal.main.entry.KQ_GZRZ\",\"serviceId\":\"portal.WorkLogService\",\"method\":\"saveGzrz\",\"body\":[{\"gzrz\":\"%s\",\"gsxm\":\"%s\",\"gzsj\":8,\"id\":\"\",\"xmbl\":\"0\",\"xmbm\":\"%s\",\"xmlb\":\"11\",\"flag\":5,\"kqid\":%s}]}", content,projectId,area,kqid);
//		result=HttpClientUtil
//		.post(jsonRequestUrl,json, headers,null);
		
		//请求参数
		Map<String, Object> params = new LinkedHashMap<String, Object>();
		params.put("schema", "portal.main.entry.KQ_GZRZ");
		params.put("serviceId", "portal.WorkLogService");
		params.put("method", "saveGzrz");
		List<Map<String,Object>> reqBody=new ArrayList<Map<String, Object>>();
		reqBody.add(
				Map2.instance()
				.put("gzrz", content)
				.put("gsxm", projectId)
				.put("gzsj", "8")
//				.put("id", "")
				.put("xmbl", "0")
				.put("xmbm", area)
				.put("xmlb", "11")
				.put("flag", "5")
				.put("kqid", kqid)
				);
		params.put("body", reqBody);
		result=HttpClientUtil
				.post(jsonRequestUrl,params, headers,null);
		
		if((Integer)result.get("code")>200){
			String msg=String.format("工号:%s，日期：%s，日志补录失败，错误信息：%s", userId,date,result.get("msg"));
			logger.info(msg);
			return;
		}
		Integer logId=(Integer) ((Map<String,Object>)result.get("body")).get("id");
		
		//最后一步，更新考勤表
		json=String.format("{\"schema\":\"portal.main.entry.T_KQB\",\"serviceId\":\"portal.CheckWorkService\",\"method\":\"updateGZRZ\",\"body\":[%s]}", kqid);
		result=HttpClientUtil.post(jsonRequestUrl,json, headers,null);
		
		String msg=String.format("工号:%s，日期：%s，日志补录成功，日志ID：%s，考勤ID：%s", userId,date,logId,kqid);
		logger.info(msg);
		
	}
}
